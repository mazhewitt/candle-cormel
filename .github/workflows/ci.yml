name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/cache
          ~/.cargo/registry
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose

  coreml-test:
    name: CoreML Runtime Tests
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/cache
          ~/.cargo/registry
          target/
        key: macos-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check macOS and CoreML version
      run: |
        echo "macOS version: $(sw_vers -productVersion)"
        echo "macOS build: $(sw_vers -buildVersion)"
        python3 -c "import platform; print(f'Python can detect CoreML: {platform.mac_ver()}')" || true
        
    - name: Run basic tests (no model downloads)
      run: cargo test --lib --verbose
      
    - name: Run CoreML unit tests (no integration tests)
      run: |
        # Run only unit tests that don't require large model downloads
        cargo test --verbose --test builder_tests
        cargo test --verbose --test utils_tests
      continue-on-error: true
      
    - name: Test examples (with error handling)
      run: |
        echo "Testing basic examples..."
        # Only test examples that don't require large model downloads
        cargo run --example qwen_demo_patterns || echo "qwen_demo_patterns failed (expected with old CoreML)"
      continue-on-error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Check if publishable
      run: cargo publish --dry-run